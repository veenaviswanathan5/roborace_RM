/* 
NOTES FOR CODING SUBSYSTEM -
1) Do not convert the controller's joystick values to positive its already taken care in the code
2) The functions are divided into 4 axis, 1,2,3 and 4 each axis represents the same as coordinate axis wrt the x and y values
3) Just feed in the values from the controller to x and y 
4) x refers to x axis value of joy stick and y to the y axis
5) If you decide to get y values from left joystick and x from right joystick there is no problem unless its assigned appropriately
*/


//These are for wheel movements(only 2 of the following variables can have non zero value at a particular time)
int turn;
int turn_dir;
int x;  // to be feeded in right motors // from joystcik
int y;  // to be feeded in left motors
int forward;
int backward;
int right;
int left;
// these are for pwm generation 
const int pwm_freq = 20000;        //Mentioned in mdd3a datasheet
const int pwm_resolution = 9;     // according to the formula PWM_freq * 2^PWM_resolution
const int pwm_channel_0 = 0;       // for wheels on the right(wire A)
const int pwm_channel_1 = 1;       // for wheels on the left (wire B)
//const int pwm_channel_2 = 2;       // for wheels on the  left (wire A)
//const int pwm_channel_3 = 3;       // for wheels on the  left (wire B)
// right side pins 
const int rmd1m1A = 33;             //motor driver 1 motor 1 wire 1(for right side motors)
const int rmd1m1B = 32;
const int rmd1m2A = 13;
const int rmd1m2B = 14;
// left side pins
const int lmd2m1A = 19;            //motor driver 2 motor 1 wire 1(for left side motors)
const int lmd2m1B = 18;
const int lmd2m2A = 16;
const int lmd2m2B = 4;

//CODE FOR CONTROLLER CONNECTION STARTS
int brakes,throttle;

#include <Bluepad32.h>

ControllerPtr myControllers[BP32_MAX_GAMEPADS];

// ControllerPtr- smart ptr, myControllers is the obj and since array size =1, the  program supports one Bluetooth controller.
// This callback gets called any time a new gamepad is connected.
// Up to 4 gamepads can be connected at the same time.


/* The Bluepad32 library automatically calls onConnectedController() when a Bluetooth controller is paired.
ctl holds the connected controller instance.
ctl contains all the functions and data of the newly connected controller.
myControllers[0] = ctl; stores the controller.
This saves the connected controller so that it can be accessed later.*/ 

void onConnectedController(ControllerPtr ctl) 
{
    bool foundEmptySlot = false;
    for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
        if (myControllers[i] == nullptr) {
            Serial.printf("CALLBACK: Controller is connected, index=%d\n", i);
            // Additionally, you can get certain gamepad properties like:
            // Model, VID, PID, BTAddr, flags, etc.
            ControllerProperties properties = ctl->getProperties();
            Serial.printf("Controller model: %s, VID=0x%04x, PID=0x%04x\n", ctl->getModelName().c_str(), properties.vendor_id,
                           properties.product_id);
            myControllers[i] = ctl;
            foundEmptySlot = true;
            break;
        }
    }
    if (!foundEmptySlot) {
        Serial.println("CALLBACK: Controller connected, but could not found empty slot");
    }
}

void onDisconnectedController(ControllerPtr ctl) {
    bool foundController = false;

    for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
        if (myControllers[i] == ctl) {
            Serial.printf("CALLBACK: Controller disconnected from index=%d\n", i);
            myControllers[i] = nullptr;
            foundController = true;
            break;
        }
    }

    if (!foundController) {
        Serial.println("CALLBACK: Controller disconnected, but not found in myControllers");
    }
}

void dumpGamepad(ControllerPtr ctl) {
    Serial.printf(
        "idx=%d, dpad: 0x%02x, buttons: 0x%04x, axis L: %4d, %4d, axis R: %4d, %4d, brake: %4d, throttle: %4d, "
        "misc: 0x%02x, gyro x:%6d y:%6d z:%6d, accel x:%6d y:%6d z:%6d\n",
        ctl->index(),        // Controller Index
        ctl->dpad(),         // D-pad
        ctl->buttons(),      // bitmask of pressed buttons
        ctl->axisX(),        // (-511 - 512) left X Axis
        ctl->axisY(),        // (-511 - 512) left Y axis
        ctl->axisRX(),       // (-511 - 512) right X axis
        ctl->axisRY(),       // (-511 - 512) right Y axis
        ctl->brake(),        // (0 - 1023): brake button
        ctl->throttle(),     // (0 - 1023): throttle (AKA gas) button
        ctl->miscButtons(),  // bitmask of pressed "misc" buttons
        ctl->gyroX(),        // Gyro X
        ctl->gyroY(),        // Gyro Y
        ctl->gyroZ(),        // Gyro Z
        ctl->accelX(),       // Accelerometer X
        ctl->accelY(),       // Accelerometer Y
        ctl->accelZ()        // Accelerometer Z
    );
}

// functions we are using:
 x = ctl->axisX();
 y = ctl->axisY();
 throttle = ctl->throttle(); //right instant turning
 brakes = ctl->brake(); //left instant turning
 //turn = ctl->axisRX();
 //turn_dir = ctl->axisRY();

/*void dumpMouse(ControllerPtr ctl) {
    Serial.printf("idx=%d, buttons: 0x%04x, scrollWheel=0x%04x, delta X: %4d, delta Y: %4d\n",
                   ctl->index(),        // Controller Index
                   ctl->buttons(),      // bitmask of pressed buttons
                   ctl->scrollWheel(),  // Scroll Wheel
                   ctl->deltaX(),       // (-511 - 512) left X Axis
                   ctl->deltaY()        // (-511 - 512) left Y axis
    );
}*/

/*void dumpKeyboard(ControllerPtr ctl) {
    static const char* key_names[] = {
        // clang-format off
        // To avoid having too much noise in this file, only a few keys are mapped to strings.
        // Starts with "A", which is offset 4.
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
        "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0",
        // Special keys
        "Enter", "Escape", "Backspace", "Tab", "Spacebar", "Underscore", "Equal", "OpenBracket", "CloseBracket",
        "Backslash", "Tilde", "SemiColon", "Quote", "GraveAccent", "Comma", "Dot", "Slash", "CapsLock",
        // Function keys
        "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12",
        // Cursors and others
        "PrintScreen", "ScrollLock", "Pause", "Insert", "Home", "PageUp", "Delete", "End", "PageDown",
        "RightArrow", "LeftArrow", "DownArrow", "UpArrow",
        // clang-format on
    };
    static const char* modifier_names[] = {
        // clang-format off
        // From 0xe0 to 0xe7
        "Left Control", "Left Shift", "Left Alt", "Left Meta",
        "Right Control", "Right Shift", "Right Alt", "Right Meta",
        // clang-format on
    };
    Serial.printf("idx=%d, Pressed keys: ", ctl->index());
    for (int key = Keyboard_A; key <= Keyboard_UpArrow; key++) {
        if (ctl->isKeyPressed(static_cast<KeyboardKey>(key))) {
            const char* keyName = key_names[key-4];
            Serial.printf("%s,", keyName);
       }
    }
    for (int key = Keyboard_LeftControl; key <= Keyboard_RightMeta; key++) {
        if (ctl->isKeyPressed(static_cast<KeyboardKey>(key))) {
            const char* keyName = modifier_names[key-0xe0];
            Serial.printf("%s,", keyName);
        }
    }
    Console.printf("\n");
}*/

/*void dumpBalanceBoard(ControllerPtr ctl) {
    Serial.printf("idx=%d,  TL=%u, TR=%u, BL=%u, BR=%u, temperature=%d\n",
                   ctl->index(),        // Controller Index
                   ctl->topLeft(),      // top-left scale
                   ctl->topRight(),     // top-right scale
                   ctl->bottomLeft(),   // bottom-left scale
                   ctl->bottomRight(),  // bottom-right scale
                   ctl->temperature()   // temperature: used to adjust the scale value's precision
    );
}*/

/*void processGamepad(ControllerPtr ctl) {
    // There are different ways to query whether a button is pressed.
    // By query each button individually:
    //  a(), b(), x(), y(), l1(), etc...
    if (ctl->a()) {
        static int colorIdx = 0;
        // Some gamepads like DS4 and DualSense support changing the color LED.
        // It is possible to change it by calling:
        switch (colorIdx % 3) {
            case 0:
                // Red
                ctl->setColorLED(255, 0, 0);
                break;
            case 1:
                // Green
                ctl->setColorLED(0, 255, 0);
                break;
            case 2:
                // Blue
                ctl->setColorLED(0, 0, 255);
                break;
        }
        colorIdx++;
    }

    if (ctl->b()) {
        // Turn on the 4 LED. Each bit represents one LED.
        static int led = 0;
        led++;
        // Some gamepads like the DS3, DualSense, Nintendo Wii, Nintendo Switch
        // support changing the "Player LEDs": those 4 LEDs that usually indicate
        // the "gamepad seat".
        // It is possible to change them by calling:
        ctl->setPlayerLEDs(led & 0x0f);
    }

    if (ctl->x()) {
        // Some gamepads like DS3, DS4, DualSense, Switch, Xbox One S, Stadia support rumble.
        // It is possible to set it by calling:
        // Some controllers have two motors: "strong motor", "weak motor".
        // It is possible to control them independently.
        ctl->playDualRumble(0 /* delayedStartMs */, 250 /* durationMs */, 0x80 /* weakMagnitude */,
   //                         0x40 /* strongMagnitude */);
   // }

    // Another way to query controller data is by getting the buttons() function.
    // See how the different "dump*" functions dump the Controller info.
    //dumpGamepad(ctl);
//}

/*void processMouse(ControllerPtr ctl) {
    // This is just an example.
    if (ctl->scrollWheel() > 0) {
        // Do Something
    } else if (ctl->scrollWheel() < 0) {
        // Do something else
    }

    // See "dumpMouse" for possible things to query.
    dumpMouse(ctl);
}*/

/*void processKeyboard(ControllerPtr ctl) {
    if (!ctl->isAnyKeyPressed())
        return;

    // This is just an example.
    if (ctl->isKeyPressed(Keyboard_A)) {
        // Do Something
        Serial.println("Key 'A' pressed");
    }

    // Don't do "else" here.
    // Multiple keys can be pressed at the same time.
    if (ctl->isKeyPressed(Keyboard_LeftShift)) {
        // Do something else
        Serial.println("Key 'LEFT SHIFT' pressed");
    }

    // Don't do "else" here.
    // Multiple keys can be pressed at the same time.
    if (ctl->isKeyPressed(Keyboard_LeftArrow)) {
        // Do something else
        Serial.println("Key 'Left Arrow' pressed");
    }

    // See "dumpKeyboard" for possible things to query.
    dumpKeyboard(ctl);
} 

void processBalanceBoard(ControllerPtr ctl) {
    // This is just an example.
    if (ctl->topLeft() > 10000) {
        // Do Something
    }

    // See "dumpBalanceBoard" for possible things to query.
    dumpBalanceBoard(ctl);
}*/



void processControllers() {
    for (auto myController : myControllers) {
        if (myController && myController->isConnected() && myController->hasData()) {
            if (myController->isGamepad()) {
                processGamepad(myController);
            } else if (myController->isMouse()) {
                processMouse(myController);
            } else if (myController->isKeyboard()) {
                processKeyboard(myController);
            } else if (myController->isBalanceBoard()) {
                processBalanceBoard(myController);
            } else {
                Serial.println("Unsupported controller");
            }
        }
    }
}

// Arduino setup function. Runs in CPU 1
void setup() 
{ 
  //Serial.begin(115200);

  //Attaching the pwm channel 0,1 to right side motor driver
  ledcSetup(pwm_channel_0,pwm_freq,pwm_resolution);
  ledcSetup(pwm_channel_1,pwm_freq,pwm_resolution);
  //RIGHT MOTORS
  ledcAttachPin(rmd1m1A,pwm_channel_0);
  ledcAttachPin(rmd1m2A,pwm_channel_0);
  //Attaching the pwm channel 2,3 to right side motor driver
  ledcSetup(pwm_channel_2,pwm_freq,pwm_resolution);
  ledcSetup(pwm_channel_3,pwm_freq,pwm_resolution);
  //LEFT MOTORS
  ledcAttachPin(lmd2m1A,pwm_channel_1);
  ledcAttachPin(lmd2m2A,pwm_channel_1);
  //Digital pins for mdd10a
  pinMode(rmd1m1B,OUTPUT);
  pinMode(rmd1m2B,OUTPUT);
  pinMode(lmd2m1B,OUTPUT);
  pinMode(lmd2m2B,OUTPUT);
  
   int x_axis,y_axis; 
   int max_pwm;
   uint16_t right_pwm,left_pwm;





    Serial.begin(115200);
    Serial.printf("Firmware: %s\n", BP32.firmwareVersion());
    const uint8_t* addr = BP32.localBdAddress();
    Serial.printf("BD Addr: %2X:%2X:%2X:%2X:%2X:%2X\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

    // Setup the Bluepad32 callbacks
    BP32.setup(&onConnectedController, &onDisconnectedController);

    // "forgetBluetoothKeys()" should be called when the user performs
    // a "device factory reset", or similar.
    // Calling "forgetBluetoothKeys" in setup() just as an example.
    // Forgetting Bluetooth keys prevents "paired" gamepads to reconnect.
    // But it might also fix some connection / re-connection issues.
    BP32.forgetBluetoothKeys();

    // Enables mouse / touchpad support for gamepads that support them.
    // When enabled, controllers like DualSense and DualShock4 generate two connected devices:
    // - First one: the gamepad
    // - Second one, which is a "virtual device", is a mouse.
    // By default, it is disabled.
    BP32.enableVirtualDevice(false);
}

// Arduino loop function. Runs in CPU 1.
void loop() 
{
    // This call fetches all the controllers' data.
    // Call this function in your main loop.
    bool dataUpdated = BP32.update();
    if (dataUpdated)
        processControllers();

    // The main loop must have some kind of "yield to lower priority task" event.
    // Otherwise, the watchdog will get triggered.
    // If your main loop doesn't have one, just add a simple `vTaskDelay(1)`.
    // Detailed info here:
    // https://stackoverflow.com/questions/66278271/task-watchdog-got-triggered-the-tasks-did-not-reset-the-watchdog-in-time

    //     vTaskDelay(1);
    delay(150);
     
    max_pwm = pow(2,pwm_resolution);
    int right,left;
    
    int z,r,l;
    x_axis = x;
    y_axis = y*(-1);
     // if ((-100<x_axis<100) && (-100<y_axis<100)) 
    if ((x_axis > -100 && x_axis < 100) && (y_axis > -100 && y_axis < 100))  // dead zone fro joystick 
    {
    Stop();
   } 
    if (x_axis>0 && y_axis>0) // Quadrant1 - go right forward 
  {
    if (x_axis+y_axis<100) // dead zone - check
    {
      Stop();
    }
      else
    {
      Serial.println("x_axis");
      Serial.println(x_axis);
      Serial.println("y_axis");
      Serial.println(y_axis);
      left_pwm = y_axis + x_axis;
      right_pwm = y_axis - x_axis;
      /*if(abs(left_pwm-right_pwm)<400){
        axis_1(y_axis,y_axis);
      }
      else{*/
      if(right_pwm>max_pwm){ 
        right_pwm = max_pwm;
        }
        if(left_pwm>max_pwm) {
          left_pwm = max_pwm;
        }
        if(right_pwm<100){ //CHECK DEADZONE 
           right_pwm = 0;
        }
        if(left_pwm<100){
          left_pwm = 0;
        }
        axis_1(left_pwm,right_pwm);
      }
    }
    
    if (x_axis>0 && y_axis<0)  // quadrant2 - reverse, right 
    {
    if (abs(x_axis)+abs(y_axis)<100){
      Stop();
    }
    else{
      left_pwm = x_axis + y_axis*(-1);
      right_pwm = y_axis*(-1) - x_axis;
      /*if(abs(left_pwm-right_pwm)<400){
        axis_2(y_axis*(-1),y_axis*(-1));
      }
      else{*/
        if(right_pwm>max_pwm){
          right_pwm = max_pwm;
        } 
        if(left_pwm>max_pwm) {
          left_pwm = max_pwm;
        }
        if(right_pwm<100) {
          right_pwm = 0;
        }
        if(left_pwm<100) {
          left_pwm = 0;
        }
        axis_2(right_pwm,left_pwm);
      }
    }
  
  if (x_axis<0 && y_axis<0) // quadrant 3- reverse, left 
  {
    if (abs(x_axis)+abs(y_axis)<100){
      Stop();
    }
    else{
      left_pwm = (x_axis*(-1)) + y_axis*(-1);
      right_pwm = y_axis*(-1) - x_axis*(-1);
      /*if(abs(left_pwm-right_pwm)<400){
        axis_3(y_axis*(-1),y_axis*(-1));
      }
      else{*/
        if(right_pwm>max_pwm) {
          right_pwm = max_pwm;
        }
        if(left_pwm>max_pwm) {
          left_pwm = max_pwm;
        }
        if(right_pwm<100) {
          right_pwm = 0;
        }
        if(left_pwm<100) {
          left_pwm = 0;
        }
        axis_3(right_pwm,left_pwm);
      }
    }
  }
  if (x_axis<0 && y_axis>0){
    if (abs(x_axis)+abs(y_axis)<100){
      Stop();
    }
      else{
        left_pwm = (x_axis*(-1)) + y_axis;
        right_pwm = y_axis - (x_axis*(-1));
      /*if(abs(left_pwm-right_pwm)<400){
        axis_4(y_axis,y_axis);
      }
    else{*/
        if(right_pwm>max_pwm) {
          right_pwm = max_pwm;
        }
        if(left_pwm>max_pwm) {
          left_pwm = max_pwm;
        }
        if(right_pwm<100) {
          right_pwm = 0;
        }
        if(left_pwm<100) {
          left_pwm = 0;
        }
        axis_4(left_pwm,right_pwm);
      }
    }
  }

  }
  

       
   
   


void axis_1(int l_pwm,int r_pwm) //used when both x and y are positive
{                                //assigning values to all A cables of motor driver
  Stop();
  for (int i = 100; i <=r_pwm; i++) 
  {  
    int smooth_pwm = map(i, 100, max_pwm, 0, max_pwm);
    ledcWrite(pwm_channel_0), smooth_pwm);  
    delay(50);  // Small delay for smooth acceleration
  }

  for (int i = 100; i <=l_pwm; i++) 
  {  
    int smooth_pwm = map(i, 100, max_pwm, 0, max_pwm);
    ledcWrite(pwm_channel_1), smooth_pwm);  
    delay(50);  // Small delay for smooth acceleration
  }
 // ledcWrite(pwm_channel_0,x);  //reduces right side motor speed so that bot turns right
  //ledcWrite(pwm_channel_1,y);
  //assingning ground to to all B cables as bot is moving front in axis 1
  digitalWrite(rmd1m1B,0);
  digitalWrite(rmd1m2B,0);
  digitalWrite(lmd2m1B,1);
  digitalWrite(lmd2m2B,1);
  Serial.println("Running in AXIS 1");
  Serial.println(x);
    Serial.println(y);
}

void axis_2(int l_pwm,int r_pwm)
{
  Stop();
   for (int i = 100; i <=r_pwm; i++) 
  {  
    int smooth_pwm = map(i, 100, max_pwm, 0, max_pwm);
    ledcWrite(pwm_channel_0), smooth_pwm);  
    delay(50);  // Small delay for smooth acceleration
  }

  for (int i = 100; i <=l_pwm; i++) 
  {  
    int smooth_pwm = map(i, 100, max_pwm, 0, max_pwm);
    ledcWrite(pwm_channel_1), smooth_pwm);  
    delay(50);  // Small delay for smooth acceleration
  }
  //ledcWrite(pwm_channel_0,x);  // as bot goes in reverse in this region we select channel 1 and 3(B wires)
  //ledcWrite(pwm_channel_1,y);
  digitalWrite(rmd1m1B,1);
  digitalWrite(rmd1m2B,1);
  digitalWrite(lmd2m1B,0);
  digitalWrite(lmd2m2B,0);
  Serial.println("Running in AXIS 2");
  Serial.println(x);
  Serial.println(y);
}

void axis_3(int l_pwm,int r_pwm)
{
  Stop();
   for (int i = 100; i <=r_pwm; i++) 
  {  
    int smooth_pwm = map(i, 100, max_pwm, 0, max_pwm);
    ledcWrite(pwm_channel_0), smooth_pwm);  
    delay(50);  // Small delay for smooth acceleration
  }

  for (int i = 100; i <=l_pwm; i++) 
  {  
    int smooth_pwm = map(i, 100, max_pwm, 0, max_pwm);
    ledcWrite(pwm_channel_1), smooth_pwm);  
    delay(50);  // Small delay for smooth acceleration
  }
  //ledcWrite(pwm_channel_0,x);  // as bot goes in reverse in this region we select channel 1 and 3(B wires)
  //ledcWrite(pwm_channel_1,y);
  digitalWrite(rmd1m1B,1);
  digitalWrite(rmd1m2B,1);
  digitalWrite(lmd2m1B,0);
  digitalWrite(lmd2m2B,0);
  Serial.println("Running in AXIS 3");
  Serial.println(x);
  Serial.println(y);
}

void axis_4(int l_pwm,int )r_pwm)
{
  Stop();
    //assigning values to all A cables of motor driver

    for (int i = 100; i <=r_pwm; i++) 
  {  
    int smooth_pwm = map(i, 100, max_pwm, 0, max_pwm);
    ledcWrite(pwm_channel_0), smooth_pwm);  
    delay(50);  // Small delay for smooth acceleration
  }

  for (int i = 100; i <=l_pwm; i++) 
  {  
    int smooth_pwm = map(i, 100, max_pwm, 0, max_pwm);
    ledcWrite(pwm_channel_1), smooth_pwm);  
    delay(50);  // Small delay for smooth acceleration
  }
  //ledcWrite(pwm_channel_0,x);  
  //ledcWrite(pwm_channel_1,y); //reduces left side motor speed so that bot turns left
    //assingning ground to to all B cables as bot is moving front in axis 1
  digitalWrite(rmd1m1B,0);
  digitalWrite(rmd1m2B,0);
  digitalWrite(lmd2m1B,1);
  digitalWrite(lmd2m2B,1);
  Serial.println("Running in AXIS 4");
  Serial.println(x);
  Serial.println(y);
}







