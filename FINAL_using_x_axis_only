/* 
NOTES FOR CODING SUBSYSTEM -
1) Do not convert the controller's joystick values to positive its already taken care in the code
2) The functions are divided into 4 axis, 1,2,3 and 4 each axis represents the same as coordinate axis wrt the x and y values
3) Just feed in the values from the controller to x and y 
4) x refers to x axis value of joy stick and y to the y axis
5) If you decide to get y values from left joystick and x from right joystick there is no problem unless its assigned appropriately
*/


//These are for wheel movements(only 2 of the following variables can have non zero value at a particular time)

int x;  // to be feeded in right motors // from joystcik
//int y;  // to be feeded in left motors
int x_axis,y_axis; 
int x_max;
// these are for pwm generation 
const int pwm_freq = 20000;        //Mentioned in mdd10a datasheet
const int pwm_resolution = 9;     // according to the formula PWM_freq * 2^PWM_resolution
const int pwm_channel_0 = 0;       // for wheels on the right(wire A)
const int pwm_channel_1 = 1;       // for wheels on the left (wire B)
uint16_t max_pwm=0; 
const int speed=512; 
float x_mapped=0; 

// right side pins 
const int rmd1m1A = 33;             //motor driver 1 motor 1 wire 1(for right side motors)
const int rmd1m1B = 32;
const int rmd1m2A = 13;
const int rmd1m2B = 14;
// left side pins
const int lmd2m1A = 19;            //motor driver 2 motor 1 wire 1(for left side motors)
const int lmd2m1B = 18;
const int lmd2m2A = 16;
const int lmd2m2B = 4;

//CODE FOR CONTROLLER CONNECTION STARTS
int brakes,throttle;

#include <Bluepad32.h>

ControllerPtr myControllers[BP32_MAX_GAMEPADS];

// ControllerPtr- smart ptr, myControllers is the obj and since array size =1, the  program supports one Bluetooth controller.
// This callback gets called any time a new gamepad is connected.
// Up to 4 gamepads can be connected at the same time.


/* The Bluepad32 library automatically calls onConnectedController() when a Bluetooth controller is paired.
ctl holds the connected controller instance.
ctl contains all the functions and data of the newly connected controller.
myControllers[0] = ctl; stores the controller.
This saves the connected controller so that it can be accessed later.*/ 

void onConnectedController(ControllerPtr ctl) 
{
    bool foundEmptySlot = false;
    for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
        if (myControllers[i] == nullptr) {
            Serial.printf("CALLBACK: Controller is connected, index=%d\n", i);
            // Additionally, you can get certain gamepad properties like:
            // Model, VID, PID, BTAddr, flags, etc.
            ControllerProperties properties = ctl->getProperties();
            Serial.printf("Controller model: %s, VID=0x%04x, PID=0x%04x\n", ctl->getModelName().c_str(), properties.vendor_id,
                           properties.product_id);
            myControllers[i] = ctl;
            foundEmptySlot = true;
            break;
        }
    }
    if (!foundEmptySlot) {
        Serial.println("CALLBACK: Controller connected, but could not found empty slot");
    }
}

void onDisconnectedController(ControllerPtr ctl) {
    bool foundController = false;

    for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
        if (myControllers[i] == ctl) {
            Serial.printf("CALLBACK: Controller disconnected from index=%d\n", i);
            myControllers[i] = nullptr;
            foundController = true;
            break;
        }
    }

    if (!foundController) {
        Serial.println("CALLBACK: Controller disconnected, but not found in myControllers");
    }
}

/*void dumpGamepad(ControllerPtr ctl) {
    Serial.printf(
        "idx=%d, dpad: 0x%02x, buttons: 0x%04x, axis L: %4d, %4d, axis R: %4d, %4d, brake: %4d, throttle: %4d, "
        "misc: 0x%02x, gyro x:%6d y:%6d z:%6d, accel x:%6d y:%6d z:%6d\n",
        ctl->index(),        // Controller Index
        ctl->dpad(),         // D-pad
        ctl->buttons(),      // bitmask of pressed buttons
        ctl->axisX(),        // (-511 - 512) left X Axis
        ctl->axisY(),        // (-511 - 512) left Y axis
        ctl->axisRX(),       // (-511 - 512) right X axis
        ctl->axisRY(),       // (-511 - 512) right Y axis
        ctl->brake(),        // (0 - 1023): brake button
        ctl->throttle(),     // (0 - 1023): throttle (AKA gas) button
        ctl->miscButtons(),  // bitmask of pressed "misc" buttons
        ctl->gyroX(),        // Gyro X
        ctl->gyroY(),        // Gyro Y
        ctl->gyroZ(),        // Gyro Z
        ctl->accelX(),       // Accelerometer X
        ctl->accelY(),       // Accelerometer Y
        ctl->accelZ()        // Accelerometer Z
    );
    x = ctl->axisX();
 //y = ctl->axisY();
 throttle = ctl->throttle(); //right instant turning
 brakes = ctl->brake(); //left instant turning
}

// functions we are using:
 
//  x = myController->axisX();  // Correct placement
//   throttle = myController->throttle();
//   brakes = myController->brake();

void processControllers() {
    for (auto myController : myControllers) {
        if (myController && myController->isConnected() && myController->hasData()) {
            if (myController->isGamepad()) {
                processGamepad(myController);
            } else if (myController->isMouse()) {
                processMouse(myController);
            } else if (myController->isKeyboard()) {
                processKeyboard(myController);
            } else if (myController->isBalanceBoard()) {
                processBalanceBoard(myController);
            } else {
                Serial.println("Unsupported controller");
            }
        }
    }
}*/ 

void dumpGamepad(ControllerPtr ctl) {
    Serial.printf(
        "axis L: %4d, brake: %4d, throttle: %4d, ",
        
        //ctl->index(),        // Controller Index
        //ctl->dpad(),         // D-pad
        //ctl->buttons(),      // bitmask of pressed buttons
        ctl->axisX(),        // (-511 - 512) left X Axis
        //ctl->axisY(),        // (-511 - 512) left Y axis
        //ctl->axisRX(),       // (-511 - 512) right X axis
        //ctl->axisRY(),       // (-511 - 512) right Y axis
        ctl->brake(),        // (0 - 1023): brake button
        ctl->throttle()     // (0 - 1023): throttle (AKA gas) button
        //ctl->miscButtons(),  // bitmask of pressed "misc" buttons
        //ctl->gyroX(),        // Gyro X
        //ctl->gyroY(),        // Gyro Y
        //ctl->gyroZ(),        // Gyro Z
        //ctl->accelX(),       // Accelerometer X
        //ctl->accelY(),       // Accelerometer Y
        //ctl->accelZ()        // Accelerometer Z
    );
 x = ctl->axisX();
 //y = ctl->axisY();
 throttle = ctl->throttle(); //right instant turning
 brakes = ctl->brake(); //left instant turning
 //turn = ctl->axisRX();
 //turn_dir = ctl->axisRY();
}



// functions we are using:

//  x = myController->axisX();  // Correct placement
//   throttle = myController->throttle();
//   brakes = myController->brake();
void processGamepad(ControllerPtr ctl) {
    // There are different ways to query whether a button is pressed.
    // By query each button individually:
    //  a(), b(), x(), y(), l1(), etc...
    if (ctl->a()) {
        static int colorIdx = 0;
        // Some gamepads like DS4 and DualSense support changing the color LED.
        // It is possible to change it by calling:
        switch (colorIdx % 3) {
            case 0:
                // Red
                ctl->setColorLED(255, 0, 0);
                break;
            case 1:
                // Green
                ctl->setColorLED(0, 255, 0);
                break;
            case 2:
                // Blue
                ctl->setColorLED(0, 0, 255);
                break;
        }
        colorIdx++;
    }

    if (ctl->b()) {
        // Turn on the 4 LED. Each bit represents one LED.
        static int led = 0;
        led++;
        // Some gamepads like the DS3, DualSense, Nintendo Wii, Nintendo Switch
        // support changing the "Player LEDs": those 4 LEDs that usually indicate
        // the "gamepad seat".
        // It is possible to change them by calling:
        ctl->setPlayerLEDs(led & 0x0f);
    }

    if (ctl->x()) {
        // Some gamepads like DS3, DS4, DualSense, Switch, Xbox One S, Stadia support rumble.
        // It is possible to set it by calling:
        // Some controllers have two motors: "strong motor", "weak motor".
        // It is possible to control them independently.
        ctl->playDualRumble(0 /* delayedStartMs */, 250 /* durationMs */, 0x80 /* weakMagnitude */,
                            0x40 /* strongMagnitude */);
    }

    // Another way to query controller data is by getting the buttons() function.
    // See how the different "dump*" functions dump the Controller info.
    dumpGamepad(ctl);
}

/*void processControllers() {
    for (auto myController : myControllers) {
        if (myController && myController->isConnected() && myController->hasData()) {
            dumpGamepad(myController);  // Ensure values are updated properly
            if (myController->isGamepad()) {
                processGamepad(myController);
            } else if (myController->isMouse()) {
                processMouse(myController);
            } else if (myController->isKeyboard()) {
                processKeyboard(myController);
            } else if (myController->isBalanceBoard()) {
                processBalanceBoard(myController);
            } else {
                Serial.println("Unsupported controller");
            }
        }
    }
}*/
void processControllers() {
    for (auto myController : myControllers) {
        if (myController && myController->isConnected() && myController->hasData()) {
            processGamepad(myController);  // Now processGamepad() is defined
        }
    }
}


// Arduino setup function. Runs in CPU 1
void setup() 
{ 
  //Serial.begin(115200);

  //Attaching the pwm channel 0,1 to right side motor driver
  ledcSetup(pwm_channel_0,pwm_freq,pwm_resolution);
  ledcSetup(pwm_channel_1,pwm_freq,pwm_resolution);
  //RIGHT MOTORS
  ledcAttachPin(rmd1m1A,pwm_channel_0);
  ledcAttachPin(rmd1m2A,pwm_channel_0);
  //Attaching the pwm channel 2,3 to right side motor driver
  
  //LEFT MOTORS
  ledcAttachPin(lmd2m1A,pwm_channel_1);
  ledcAttachPin(lmd2m2A,pwm_channel_1);
  //Digital pins for mdd10a
  pinMode(rmd1m1B,OUTPUT);
  pinMode(rmd1m2B,OUTPUT);
  pinMode(lmd2m1B,OUTPUT);
  pinMode(lmd2m2B,OUTPUT);
  
   
   uint16_t max_pwm;
   uint16_t right_pwm,left_pwm;


    Serial.begin(115200);
    Serial.printf("Firmware: %s\n", BP32.firmwareVersion());
    const uint8_t* addr = BP32.localBdAddress();
    Serial.printf("BD Addr: %2X:%2X:%2X:%2X:%2X:%2X\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

    // Setup the Bluepad32 callbacks
    BP32.setup(&onConnectedController, &onDisconnectedController);

    // "forgetBluetoothKeys()" should be called when the user performs
    // a "device factory reset", or similar.
    // Calling "forgetBluetoothKeys" in setup() just as an example.
    // Forgetting Bluetooth keys prevents "paired" gamepads to reconnect.
    // But it might also fix some connection / re-connection issues.
    BP32.forgetBluetoothKeys();

    // Enables mouse / touchpad support for gamepads that support them.
    // When enabled, controllers like DualSense and DualShock4 generate two connected devices:
    // - First one: the gamepad
    // - Second one, which is a "virtual device", is a mouse.
    // By default, it is disabled.
    BP32.enableVirtualDevice(false);
}

// Arduino loop function. Runs in CPU 1.
void stop_motors();  // Function prototype
void calc_speed(int throttle, int x_axis);  
void calc_speed_reverse(int brakes, int x_axis);




void loop() 
{
    // This call fetches all the controllers' data.
    // Call this function in your main loop.
    bool dataUpdated = BP32.update();
    if (dataUpdated)
        processControllers();

    // The main loop must have some kind of "yield to lower priority task" event.
    // Otherwise, the watchdog will get triggered.
    // If your main loop doesn't have one, just add a simple vTaskDelay(1).
    // Detailed info here:
    // https://stackoverflow.com/questions/66278271/task-watchdog-got-triggered-the-tasks-did-not-reset-the-watchdog-in-time

    //     vTaskDelay(1);
    delay(150);
     
    max_pwm =  pow(2, pwm_resolution);

    //int speed=0;
    
    int z,r,l;
    x_axis = x;
    //y_axis = y*(-1);
     // if ((-100<x_axis<100) && (-100<y_axis<100)) 
    if (x_axis > -40 && x_axis < 40) //&& (y_axis > -100 && y_axis < 100))  // dead zone fro joystick 
    {
    stop_motors();
   } 
    
     x_max=max_pwm;
    // since we need to map it for pwm calculation, it can be set to same resolutoon 
    int forward_speed = map(throttle, 0, 1023, 0, 512); 
    Serial.print("throttle value");
    Serial.println(forward_speed);

    int reverse_speed = map(brakes, 0, 1023, 0, 512); 

    Serial.print("brake value");
    Serial.println(reverse_speed);

   if(throttle>0 && brakes <=0 ){   // see deadzone 
   calc_speed(throttle, x_axis);
   }
   
   if(throttle <=0 && brakes>0){
    calc_speed_reverse(brakes, x_axis);
   }

  
   if(throttle>0 && brakes>0){
    stop_motors();

   }

   
    

}



void calc_speed(int forward_speed, int x)
{
    //forward_speed = map(forward_speed, 0, 512, 0, max_pwm); // 

    //ledcWrite(pwm_channel_1, forward_speed); // left motor moves at the speed given by throttle button 
    // right motor speed for right turn

     x_mapped = map(abs(x), 0, 512, 0, max_pwm);

    float ratio = 1.0 - (((x_mapped)*(x_mapped)) / (x_max*x_max));
    
    int l_pwm, r_pwm;

    if (x >= 0)  // right turn, slow down right motor
    {
        r_pwm = forward_speed * ratio;
        l_pwm = forward_speed;
    }
    else  // left turn, slow down left motor
    {
        l_pwm = forward_speed * ratio;
        r_pwm = forward_speed;
    }

    if(r_pwm>speed){
      r_pwm = speed;
    }

    if(l_pwm>speed){
      l_pwm = speed;
    }

    ledcWrite(pwm_channel_0, r_pwm); // apply calculated right motor speed
    ledcWrite(pwm_channel_1, l_pwm); // apply calculated left motor speed

    //assingning ground to to all B cables as bot is moving front in axis 1
  digitalWrite(rmd1m1B,0);
  digitalWrite(rmd1m2B,0);
  digitalWrite(lmd2m1B,1);
  digitalWrite(lmd2m2B,1);
  Serial.println("Running forward");
  Serial.println(l_pwm);
  Serial.println(r_pwm);
}

void calc_speed_reverse(int reverse_speed, int x)
{
    reverse_speed = map(reverse_speed, 0, 512, 0, max_pwm);  

    x_mapped = map(abs(x), 0, 512, 0, max_pwm);
    //float ratio = 1.0 - (float(x_mapped) / x_max);
    float ratio = 1.0 - (((x_mapped)*(x_mapped)) / (x_max*x_max));
    
    int l_pwm, r_pwm;

    if (x >= 0)  // right turn while reversing, slow down right motor
    {
        r_pwm = reverse_speed * ratio;
        l_pwm = reverse_speed;
    }
    else  // left turn while reversing, slow down left motor
    {
        l_pwm = reverse_speed * ratio;
        r_pwm = reverse_speed;
    }

    if(r_pwm>speed){
      r_pwm = speed;
    }

    if(l_pwm>speed){
      l_pwm = speed;
    }


    ledcWrite(pwm_channel_0, r_pwm); // apply left motor speed in reverse
    ledcWrite(pwm_channel_1, l_pwm); // apply right motor speed in reverse

  digitalWrite(rmd1m1B,1);
  digitalWrite(rmd1m2B,1);
  digitalWrite(lmd2m1B,0);
  digitalWrite(lmd2m2B,0);

    Serial.println(l_pwm);
    Serial.println(r_pwm);
}

void stop_motors()
{
  ledcWrite(pwm_channel_0, 0); //stop
  ledcWrite(pwm_channel_1, 0);
}
